reactive.system.client.kafka {

  # Tuning this parameter of how many requests can be handled in parallel
  parallelism = 64

  # Following parameter MUST be explicitily defined.
  # response-topic = ""

  default-dispatcher {
    type = "Dispatcher"
    executor = "thread-pool-executor"

    thread-pool-executor {
      fixed-pool-size = 16
    }
  }

  consumer {

    # Following parameter MUST be explicitily defined.
    # bootstrap-servers = ["localhost:9092"]
    # group-id = ""

    commit-refresh-interval = 60s

    # Tuning property of scheduled polls.
    poll-interval = 50ms

    # Tuning property of the `KafkaConsumer.poll` parameter.
    # Note that non-zero value means that blocking of the thread that
    # is executing the stage will be blocked.
    poll-timeout = 50ms

    # The stage will be await outstanding offset commit requests before
    # shutting down, but if that takes longer than this timeout it will
    # stop forcefully.
    stop-timeout = 30s

    # How long to wait for `KafkaConsumer.close`
    close-timeout = 20s

    # If offset commit requests are not completed within this timeout
    # the returned Future is completed `TimeoutException`.
    commit-timeout = 15s

    # If commits take longer than this time a warning is logged
    commit-time-warning = 1s

    # If the KafkaConsumer can't connect to the broker the poll will be
    # aborted after this timeout. The KafkaConsumerActor will throw
    # org.apache.kafka.common.errors.WakeupException which will be ignored
    # until max-wakeups limit gets exceeded.
    wakeup-timeout = 3s

    # After exceeding maxinum wakeups the consumer will stop and the stage will fail.
    max-wakeups = 10

    # If enabled, log stack traces before waking up the KafkaConsumer to give
    # some indication why the KafkaConsumer is not honouring the `poll-timeout`
    wakeup-debug = true

    # Fully qualified config path which holds the dispatcher configuration
    # to be used by the KafkaConsumerActor. Some blocking may occur.
    use-dispatcher = "reactive.system.client.kafka.default-dispatcher"

    # Time to wait for pending requests when a partition is closed
    wait-close-partition = 500ms

    # Properties defined by org.apache.kafka.clients.consumer.ConsumerConfig
    # can be defined in this configuration section.
    kafka-clients {
      # Enable auto-commit by default
      enable.auto.commit = true
      # Start from the very beginning by default
      auto.offset.reset = "earliest"
    }
  }

  producer {

    # Following properties MUST be explicitily defined.
    # bootstrap-servers = ["localhost:9092"]

    # The time interval to commit a transaction when using the `Transactional.sink` or `Transactional.flow`
    eos-commit-interval = 100ms

    # Tuning parameter of how many sends that can run in parallel.
    parallelism = 100

    # How long to wait for `KafkaProducer.close`
    close-timeout = 60s

    # Fully qualified config path which holds the dispatcher configuration
    # to be used by the producer stages. Some blocking may occur.
    # When this value is empty, the dispatcher configured for the stream
    # will be used.
    use-dispatcher = "reactive.system.client.kafka.default-dispatcher"

    # Properties defined by org.apache.kafka.clients.producer.ProducerConfig
    # can be defined in this configuration section.
    kafka-clients {
    }
  }
}