Index.PACKAGES = {"org.patricknoir" : [], "org.patricknoir.kafka" : [], "akka.pattern" : [], "akka" : [], "org.patricknoir.kafka.reactive.client.actors" : [{"name" : "org.patricknoir.kafka.reactive.client.actors.protocol", "shortDescription" : "", "object" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html", "members_object" : [{"label" : "SendMessageComplete", "tail" : "", "member" : "org.patricknoir.kafka.reactive.client.actors.protocol.SendMessageComplete", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#SendMessageCompleteextendsProductwithSerializable", "kind" : "case class"}, {"label" : "StreamRequestWithSender", "tail" : "", "member" : "org.patricknoir.kafka.reactive.client.actors.protocol.StreamRequestWithSender", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#StreamRequestWithSenderextendsProductwithSerializable", "kind" : "case class"}, {"label" : "StreamRequest", "tail" : "", "member" : "org.patricknoir.kafka.reactive.client.actors.protocol.StreamRequest", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#StreamRequestextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ResponseInfo", "tail" : "", "member" : "org.patricknoir.kafka.reactive.client.actors.protocol.ResponseInfo", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#ResponseInfoextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/package$$protocol$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.patricknoir.kafka.reactive.client.actors.StreamCoordinatorActor", "shortDescription" : "Coordinates the requests both: request-response-message andone-way-message.", "object" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html", "members_class" : [{"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "org.patricknoir.kafka.reactive.client.actors.StreamCoordinatorActor.receive", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"member" : "org.patricknoir.kafka.reactive.client.actors.StreamCoordinatorActor#<init>", "error" : "unsupported entity"}, {"label" : "log", "tail" : "(): LoggingAdapter", "member" : "akka.actor.ActorLogging.log", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#log:akka.event.LoggingAdapter", "kind" : "def"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "props", "tail" : "(): Props", "member" : "org.patricknoir.kafka.reactive.client.actors.StreamCoordinatorActor.props", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#props:akka.actor.Props", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamCoordinatorActor.html", "kind" : "class"}, {"name" : "org.patricknoir.kafka.reactive.client.actors.StreamPublisherActor", "shortDescription" : "Represents the entry point for the client requests intothe client stream.", "object" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html", "members_class" : [{"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "org.patricknoir.kafka.reactive.client.actors.StreamPublisherActor.receive", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"member" : "org.patricknoir.kafka.reactive.client.actors.StreamPublisherActor#<init>", "error" : "unsupported entity"}, {"label" : "log", "tail" : "(): LoggingAdapter", "member" : "akka.actor.ActorLogging.log", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#log:akka.event.LoggingAdapter", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.stream.actor.ActorPublisher.aroundPostStop", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.stream.actor.ActorPublisher.aroundPostRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.stream.actor.ActorPublisher.aroundPreRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.stream.actor.ActorPublisher.aroundPreStart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: Receive, msg: Any): Unit", "member" : "akka.stream.actor.ActorPublisher.aroundReceive", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#aroundReceive(receive:ActorPublisher.this.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "onErrorThenStop", "tail" : "(cause: Throwable): Unit", "member" : "akka.stream.actor.ActorPublisher.onErrorThenStop", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#onErrorThenStop(cause:Throwable):Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(cause: Throwable): Unit", "member" : "akka.stream.actor.ActorPublisher.onError", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#onError(cause:Throwable):Unit", "kind" : "def"}, {"label" : "onCompleteThenStop", "tail" : "(): Unit", "member" : "akka.stream.actor.ActorPublisher.onCompleteThenStop", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#onCompleteThenStop():Unit", "kind" : "def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "akka.stream.actor.ActorPublisher.onComplete", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#onComplete():Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(element: StreamRequestWithSender): Unit", "member" : "akka.stream.actor.ActorPublisher.onNext", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#onNext(element:T):Unit", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "akka.stream.actor.ActorPublisher.isCanceled", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#isCanceled:Boolean", "kind" : "final def"}, {"label" : "isErrorEmitted", "tail" : "(): Boolean", "member" : "akka.stream.actor.ActorPublisher.isErrorEmitted", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#isErrorEmitted:Boolean", "kind" : "final def"}, {"label" : "isCompleted", "tail" : "(): Boolean", "member" : "akka.stream.actor.ActorPublisher.isCompleted", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#isCompleted:Boolean", "kind" : "final def"}, {"label" : "totalDemand", "tail" : "(): Long", "member" : "akka.stream.actor.ActorPublisher.totalDemand", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#totalDemand:Long", "kind" : "final def"}, {"label" : "isActive", "tail" : "(): Boolean", "member" : "akka.stream.actor.ActorPublisher.isActive", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#isActive:Boolean", "kind" : "final def"}, {"label" : "subscriptionTimeout", "tail" : "(): Duration", "member" : "akka.stream.actor.ActorPublisher.subscriptionTimeout", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#subscriptionTimeout:scala.concurrent.duration.Duration", "kind" : "def"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "props", "tail" : ": Props", "member" : "org.patricknoir.kafka.reactive.client.actors.StreamPublisherActor.props", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#props:akka.actor.Props", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamPublisherActor.html", "kind" : "class"}, {"name" : "org.patricknoir.kafka.reactive.client.actors.StreamRequestActor", "shortDescription" : "This actor handles the requests for the request-response-message.", "object" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html", "members_class" : [{"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "org.patricknoir.kafka.reactive.client.actors.StreamRequestActor.receive", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"member" : "org.patricknoir.kafka.reactive.client.actors.StreamRequestActor#<init>", "error" : "unsupported entity"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "props", "tail" : "(origin: ActorRef, timeout: Timeout, deserializer: ReactiveDeserializer[_]): Props", "member" : "org.patricknoir.kafka.reactive.client.actors.StreamRequestActor.props", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#props(origin:akka.actor.ActorRef,timeout:akka.util.Timeout,deserializer:org.patricknoir.kafka.reactive.common.ReactiveDeserializer[_]):akka.actor.Props", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestActor.html", "kind" : "class"}, {"name" : "org.patricknoir.kafka.reactive.client.actors.StreamRequestOneWayActor", "shortDescription" : "This Actor is used to handle request of type one-way-message.", "object" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html", "members_class" : [{"label" : "receive", "tail" : "(): Receive", "member" : "org.patricknoir.kafka.reactive.client.actors.StreamRequestOneWayActor.receive", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#receive:StreamRequestOneWayActor.this.Receive", "kind" : "def"}, {"member" : "org.patricknoir.kafka.reactive.client.actors.StreamRequestOneWayActor#<init>", "error" : "unsupported entity"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "props", "tail" : "(origin: ActorRef, timeout: Timeout): Props", "member" : "org.patricknoir.kafka.reactive.client.actors.StreamRequestOneWayActor.props", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#props(origin:akka.actor.ActorRef,timeout:akka.util.Timeout):akka.actor.Props", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/patricknoir\/kafka\/reactive\/client\/actors\/StreamRequestOneWayActor.html", "kind" : "class"}], "org.patricknoir.kafka.reactive.client.config" : [{"name" : "org.patricknoir.kafka.reactive.client.config.KafkaReactiveClientConfig", "shortDescription" : "Created by josee on 29\/03\/2017.", "object" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html", "members_object" : [{"label" : "default", "tail" : "()(system: ActorSystem): KafkaReactiveClientConfig", "member" : "org.patricknoir.kafka.reactive.client.config.KafkaReactiveClientConfig.default", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#default()(implicitsystem:akka.actor.ActorSystem):org.patricknoir.kafka.reactive.client.config.KafkaReactiveClientConfig", "kind" : "def"}, {"label" : "apply", "tail" : "(config: Config): KafkaReactiveClientConfig", "member" : "org.patricknoir.kafka.reactive.client.config.KafkaReactiveClientConfig.apply", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#apply(config:com.typesafe.config.Config):org.patricknoir.kafka.reactive.client.config.KafkaReactiveClientConfig", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "org.patricknoir.kafka.reactive.client.config.KafkaReactiveClientConfig#<init>", "error" : "unsupported entity"}, {"label" : "producerConfig", "tail" : ": ProducerSettings[String, String]", "member" : "org.patricknoir.kafka.reactive.client.config.KafkaReactiveClientConfig.producerConfig", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#producerConfig:akka.kafka.ProducerSettings[String,String]", "kind" : "val"}, {"label" : "consumerConfig", "tail" : ": ConsumerSettings[String, String]", "member" : "org.patricknoir.kafka.reactive.client.config.KafkaReactiveClientConfig.consumerConfig", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#consumerConfig:akka.kafka.ConsumerSettings[String,String]", "kind" : "val"}, {"label" : "responseTopic", "tail" : ": String", "member" : "org.patricknoir.kafka.reactive.client.config.KafkaReactiveClientConfig.responseTopic", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#responseTopic:String", "kind" : "val"}, {"label" : "parallelism", "tail" : ": Int", "member" : "org.patricknoir.kafka.reactive.client.config.KafkaReactiveClientConfig.parallelism", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#parallelism:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/patricknoir\/kafka\/reactive\/client\/config\/KafkaReactiveClientConfig.html", "kind" : "case class"}], "org.patricknoir.kafka.reactive.server.dsl" : [{"name" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSinkAtLeastOnceSinkShape", "shortDescription" : "", "members_case class" : [{"member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSinkAtLeastOnceSinkShape#<init>", "error" : "unsupported entity"}, {"label" : "sink", "tail" : ": Sink[(CommittableMessage[String, String], Future[KafkaResponseEnvelope]), _]", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSinkAtLeastOnceSinkShape.sink", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#sink:akka.stream.scaladsl.Sink[(akka.kafka.ConsumerMessage.CommittableMessage[String,String],scala.concurrent.Future[org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope]),_]", "kind" : "val"}, {"label" : "route", "tail" : ": ReactiveRoute", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSinkAtLeastOnceSinkShape.route", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#route:org.patricknoir.kafka.reactive.server.ReactiveRoute", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkAtLeastOnceSinkShape.html", "kind" : "case class"}, {"name" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSinkShape", "shortDescription" : "", "members_case class" : [{"member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSinkShape#<init>", "error" : "unsupported entity"}, {"label" : "sink", "tail" : ": Sink[Future[KafkaResponseEnvelope], _]", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSinkShape.sink", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#sink:akka.stream.scaladsl.Sink[scala.concurrent.Future[org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope],_]", "kind" : "val"}, {"label" : "route", "tail" : ": ReactiveRoute", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSinkShape.route", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#route:org.patricknoir.kafka.reactive.server.ReactiveRoute", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSinkShape.html", "kind" : "case class"}, {"name" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceAtLeastOnceShape", "shortDescription" : "", "members_class" : [{"label" : "to", "tail" : "(sinkShape: ReactiveSinkAtLeastOnceSinkShape): ReactiveSystem", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceAtLeastOnceShape.to", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#to(sinkShape:org.patricknoir.kafka.reactive.server.dsl.package.ReactiveSinkAtLeastOnceSinkShape):org.patricknoir.kafka.reactive.server.ReactiveSystem", "kind" : "def"}, {"label" : "~>", "tail" : "(sinkShape: ReactiveSinkAtLeastOnceSinkShape): ReactiveSystem", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceAtLeastOnceShape.~>", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#~>(sinkShape:org.patricknoir.kafka.reactive.server.dsl.package.ReactiveSinkAtLeastOnceSinkShape):org.patricknoir.kafka.reactive.server.ReactiveSystem", "kind" : "def"}, {"label" : "via", "tail" : "(route: ReactiveRoute): ReactiveSourceRouteAtLeastOnceShape", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceAtLeastOnceShape.via", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#via(route:org.patricknoir.kafka.reactive.server.ReactiveRoute):org.patricknoir.kafka.reactive.server.dsl.package.ReactiveSourceRouteAtLeastOnceShape", "kind" : "def"}, {"label" : "~>", "tail" : "(route: ReactiveRoute): ReactiveSourceRouteAtLeastOnceShape", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceAtLeastOnceShape.~>", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#~>(route:org.patricknoir.kafka.reactive.server.ReactiveRoute):org.patricknoir.kafka.reactive.server.dsl.package.ReactiveSourceRouteAtLeastOnceShape", "kind" : "def"}, {"member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceAtLeastOnceShape#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceAtLeastOnceShape.html", "kind" : "class"}, {"name" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceRouteAtLeastOnceShape", "shortDescription" : "", "members_class" : [{"label" : "to", "tail" : "(sink: Sink[(CommittableMessage[String, String], Future[KafkaResponseEnvelope]), _]): ReactiveSystem", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceRouteAtLeastOnceShape.to", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#to(sink:akka.stream.scaladsl.Sink[(akka.kafka.ConsumerMessage.CommittableMessage[String,String],scala.concurrent.Future[org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope]),_]):org.patricknoir.kafka.reactive.server.ReactiveSystem", "kind" : "def"}, {"label" : "~>", "tail" : "(sink: Sink[(CommittableMessage[String, String], Future[KafkaResponseEnvelope]), _]): ReactiveSystem", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceRouteAtLeastOnceShape.~>", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#~>(sink:akka.stream.scaladsl.Sink[(akka.kafka.ConsumerMessage.CommittableMessage[String,String],scala.concurrent.Future[org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope]),_]):org.patricknoir.kafka.reactive.server.ReactiveSystem", "kind" : "def"}, {"member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceRouteAtLeastOnceShape#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteAtLeastOnceShape.html", "kind" : "class"}, {"name" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceRouteShape", "shortDescription" : "", "members_class" : [{"label" : "to", "tail" : "(sink: Sink[Future[KafkaResponseEnvelope], _]): ReactiveSystem", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceRouteShape.to", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#to(sink:akka.stream.scaladsl.Sink[scala.concurrent.Future[org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope],_]):org.patricknoir.kafka.reactive.server.ReactiveSystem", "kind" : "def"}, {"label" : "~>", "tail" : "(sink: Sink[Future[KafkaResponseEnvelope], _]): ReactiveSystem", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceRouteShape.~>", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#~>(sink:akka.stream.scaladsl.Sink[scala.concurrent.Future[org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope],_]):org.patricknoir.kafka.reactive.server.ReactiveSystem", "kind" : "def"}, {"member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceRouteShape#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceRouteShape.html", "kind" : "class"}, {"name" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceShape", "shortDescription" : "", "members_class" : [{"label" : "to", "tail" : "(sinkShape: ReactiveSinkShape): ReactiveSystem", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceShape.to", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#to(sinkShape:org.patricknoir.kafka.reactive.server.dsl.package.ReactiveSinkShape):org.patricknoir.kafka.reactive.server.ReactiveSystem", "kind" : "def"}, {"label" : "~>", "tail" : "(sinkShape: ReactiveSinkShape): ReactiveSystem", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceShape.~>", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#~>(sinkShape:org.patricknoir.kafka.reactive.server.dsl.package.ReactiveSinkShape):org.patricknoir.kafka.reactive.server.ReactiveSystem", "kind" : "def"}, {"label" : "via", "tail" : "(route: ReactiveRoute): ReactiveSourceRouteShape", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceShape.via", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#via(route:org.patricknoir.kafka.reactive.server.ReactiveRoute):org.patricknoir.kafka.reactive.server.dsl.package.ReactiveSourceRouteShape", "kind" : "def"}, {"label" : "~>", "tail" : "(route: ReactiveRoute): ReactiveSourceRouteShape", "member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceShape.~>", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#~>(route:org.patricknoir.kafka.reactive.server.ReactiveRoute):org.patricknoir.kafka.reactive.server.dsl.package.ReactiveSourceRouteShape", "kind" : "def"}, {"member" : "org.patricknoir.kafka.reactive.server.dsl.ReactiveSourceShape#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$ReactiveSourceShape.html", "kind" : "class"}, {"name" : "org.patricknoir.kafka.reactive.server.dsl.request", "shortDescription" : "", "object" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html", "members_object" : [{"label" : "aSync", "tail" : "(id: String)(f: (In) â‡’ Out)(arg0: ReactiveDeserializer[In], arg1: ReactiveSerializer[Out], ec: ExecutionContext): ReactiveRoute", "member" : "org.patricknoir.kafka.reactive.server.dsl.request.aSync", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#aSync[In,Out](id:String)(f:In=>Out)(implicitevidence$6:org.patricknoir.kafka.reactive.common.ReactiveDeserializer[In],implicitevidence$7:org.patricknoir.kafka.reactive.common.ReactiveSerializer[Out],implicitec:scala.concurrent.ExecutionContext):org.patricknoir.kafka.reactive.server.ReactiveRoute", "kind" : "def"}, {"label" : "sync", "tail" : "(id: String)(f: (In) â‡’ Out)(arg0: ReactiveDeserializer[In], arg1: ReactiveSerializer[Out]): ReactiveRoute", "member" : "org.patricknoir.kafka.reactive.server.dsl.request.sync", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#sync[In,Out](id:String)(f:In=>Out)(implicitevidence$4:org.patricknoir.kafka.reactive.common.ReactiveDeserializer[In],implicitevidence$5:org.patricknoir.kafka.reactive.common.ReactiveSerializer[Out]):org.patricknoir.kafka.reactive.server.ReactiveRoute", "kind" : "def"}, {"label" : "apply", "tail" : "(id: String)(f: (In) â‡’ Future[Out])(arg0: ReactiveDeserializer[In], arg1: ReactiveSerializer[Out]): ReactiveRoute", "member" : "org.patricknoir.kafka.reactive.server.dsl.request.apply", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#apply[In,Out](id:String)(f:In=>scala.concurrent.Future[Out])(implicitevidence$2:org.patricknoir.kafka.reactive.common.ReactiveDeserializer[In],implicitevidence$3:org.patricknoir.kafka.reactive.common.ReactiveSerializer[Out]):org.patricknoir.kafka.reactive.server.ReactiveRoute", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/dsl\/package$$request$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.patricknoir.kafka.reactive.common" : [{"name" : "org.patricknoir.kafka.reactive.common.deserializer", "shortDescription" : "Used to deserialize json strings into types members of org.patricknoir.kafka.reactive.common.ReactiveDeserializer", "object" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html", "members_object" : [{"label" : "deserialize", "tail" : "(in: String)(arg0: ReactiveDeserializer[Out]): Either[Throwable, Out]", "member" : "org.patricknoir.kafka.reactive.common.deserializer.deserialize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#deserialize[Out](in:String)(implicitevidence$1:org.patricknoir.kafka.reactive.common.ReactiveDeserializer[Out]):Either[Throwable,Out]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$deserializer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.patricknoir.kafka.reactive.common.Destination", "shortDescription" : "", "object" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html", "members_object" : [{"label" : "unapply", "tail" : "(destination: String): Option[(String, String, String)]", "member" : "org.patricknoir.kafka.reactive.common.Destination.unapply", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#unapply(destination:String):Option[(String,String,String)]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.patricknoir.kafka.reactive.common.Destination.toString", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#toString():String", "kind" : "def"}, {"member" : "org.patricknoir.kafka.reactive.common.Destination#<init>", "error" : "unsupported entity"}, {"label" : "serviceId", "tail" : ": String", "member" : "org.patricknoir.kafka.reactive.common.Destination.serviceId", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#serviceId:String", "kind" : "val"}, {"label" : "topic", "tail" : ": String", "member" : "org.patricknoir.kafka.reactive.common.Destination.topic", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#topic:String", "kind" : "val"}, {"label" : "medium", "tail" : ": String", "member" : "org.patricknoir.kafka.reactive.common.Destination.medium", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#medium:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/patricknoir\/kafka\/reactive\/common\/package$$Destination.html", "kind" : "case class"}, {"name" : "org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope", "shortDescription" : "", "object" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html", "members_object" : [{"label" : "kafkaRequestEnvelopeDecoder", "tail" : ": Decoder[KafkaRequestEnvelope]", "member" : "org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope.kafkaRequestEnvelopeDecoder", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#kafkaRequestEnvelopeDecoder:io.circe.Decoder[org.patricknoir.kafka.reactive.common.package.KafkaRequestEnvelope]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope#<init>", "error" : "unsupported entity"}, {"label" : "headers", "tail" : ": Map[String, String]", "member" : "org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope.headers", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#headers:Map[String,String]", "kind" : "val"}, {"label" : "replyTo", "tail" : ": String", "member" : "org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope.replyTo", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#replyTo:String", "kind" : "val"}, {"label" : "payload", "tail" : ": String", "member" : "org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope.payload", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#payload:String", "kind" : "val"}, {"label" : "destination", "tail" : ": Destination", "member" : "org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope.destination", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#destination:org.patricknoir.kafka.reactive.common.package.Destination", "kind" : "val"}, {"label" : "correlationId", "tail" : ": String", "member" : "org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope.correlationId", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#correlationId:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaRequestEnvelope.html", "kind" : "case class"}, {"name" : "org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope", "shortDescription" : "", "object" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html", "members_object" : [{"label" : "respEnvelopeDecoder", "tail" : ": Decoder[KafkaResponseEnvelope]", "member" : "org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope.respEnvelopeDecoder", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#respEnvelopeDecoder:io.circe.Decoder[org.patricknoir.kafka.reactive.common.package.KafkaResponseEnvelope]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope#<init>", "error" : "unsupported entity"}, {"label" : "headers", "tail" : ": Map[String, String]", "member" : "org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope.headers", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#headers:Map[String,String]", "kind" : "val"}, {"label" : "statusCode", "tail" : ": Int", "member" : "org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope.statusCode", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#statusCode:Int", "kind" : "val"}, {"label" : "response", "tail" : ": String", "member" : "org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope.response", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#response:String", "kind" : "val"}, {"label" : "replyTo", "tail" : ": String", "member" : "org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope.replyTo", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#replyTo:String", "kind" : "val"}, {"label" : "correlationId", "tail" : ": String", "member" : "org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope.correlationId", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#correlationId:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseEnvelope.html", "kind" : "case class"}, {"name" : "org.patricknoir.kafka.reactive.common.KafkaResponseStatusCode", "shortDescription" : "", "object" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html", "members_object" : [{"label" : "InternalServerError", "tail" : ": Int", "member" : "org.patricknoir.kafka.reactive.common.KafkaResponseStatusCode.InternalServerError", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#InternalServerError:Int", "kind" : "val"}, {"label" : "BadRequest", "tail" : ": Int", "member" : "org.patricknoir.kafka.reactive.common.KafkaResponseStatusCode.BadRequest", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#BadRequest:Int", "kind" : "val"}, {"label" : "NotFound", "tail" : ": Int", "member" : "org.patricknoir.kafka.reactive.common.KafkaResponseStatusCode.NotFound", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#NotFound:Int", "kind" : "val"}, {"label" : "Success", "tail" : ": Int", "member" : "org.patricknoir.kafka.reactive.common.KafkaResponseStatusCode.Success", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#Success:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$KafkaResponseStatusCode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.patricknoir.kafka.reactive.common.ReactiveDeserializer", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "deserialize", "tail" : "(input: Array[Byte]): Either[Throwable, Payload]", "member" : "org.patricknoir.kafka.reactive.common.ReactiveDeserializer.deserialize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html#deserialize(input:Array[Byte]):Either[Throwable,Payload]", "kind" : "abstract def"}], "shortDescription" : "Typeclass for generic types which can be decoded from an Array[Byte] representation", "object" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html", "members_object" : [{"label" : "unitDeserializer", "tail" : ": ReactiveDeserializer[Unit] { def deserialize(input: Array[Byte]): scala.util.Right[Nothing,Unit] }", "member" : "org.patricknoir.kafka.reactive.common.ReactiveDeserializer.unitDeserializer", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#unitDeserializer:org.patricknoir.kafka.reactive.common.ReactiveDeserializer[Unit]{defdeserialize(input:Array[Byte]):scala.util.Right[Nothing,Unit]}", "kind" : "implicit val"}, {"label" : "byteArrayDeserializer", "tail" : ": ReactiveDeserializer[Array[Byte]] { def deserialize(input: Array[Byte]): scala.util.Right[Nothing,Array[Byte]] }", "member" : "org.patricknoir.kafka.reactive.common.ReactiveDeserializer.byteArrayDeserializer", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#byteArrayDeserializer:org.patricknoir.kafka.reactive.common.ReactiveDeserializer[Array[Byte]]{defdeserialize(input:Array[Byte]):scala.util.Right[Nothing,Array[Byte]]}", "kind" : "implicit val"}, {"label" : "circeDecoderDeserializer", "tail" : "(arg0: Decoder[Out]): ReactiveDeserializer[Out] { def deserialize(input: Array[Byte]): scala.util.Either[RuntimeException,Out] }", "member" : "org.patricknoir.kafka.reactive.common.ReactiveDeserializer.circeDecoderDeserializer", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#circeDecoderDeserializer[Out](implicitevidence$1:io.circe.Decoder[Out]):org.patricknoir.kafka.reactive.common.ReactiveDeserializer[Out]{defdeserialize(input:Array[Byte]):scala.util.Either[RuntimeException,Out]}", "kind" : "implicit def"}, {"label" : "stringDeserializer", "tail" : ": ReactiveDeserializer[String] { def deserialize(input: Array[Byte]): scala.util.Right[Nothing,String] }", "member" : "org.patricknoir.kafka.reactive.common.ReactiveDeserializer.stringDeserializer", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#stringDeserializer:org.patricknoir.kafka.reactive.common.ReactiveDeserializer[String]{defdeserialize(input:Array[Byte]):scala.util.Right[Nothing,String]}", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveDeserializer.html", "kind" : "trait"}, {"name" : "org.patricknoir.kafka.reactive.common.ReactiveSerializer", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "serialize", "tail" : "(payload: Payload): Array[Byte]", "member" : "org.patricknoir.kafka.reactive.common.ReactiveSerializer.serialize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html#serialize(payload:Payload):Array[Byte]", "kind" : "abstract def"}], "shortDescription" : "Created by patrick on 25\/07\/2016.", "object" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html", "members_object" : [{"label" : "unitSerializer", "tail" : ": ReactiveSerializer[Unit]", "member" : "org.patricknoir.kafka.reactive.common.ReactiveSerializer.unitSerializer", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#unitSerializer:org.patricknoir.kafka.reactive.common.ReactiveSerializer[Unit]", "kind" : "implicit val"}, {"label" : "byteArraySerializer", "tail" : ": ReactiveSerializer[Array[Byte]]", "member" : "org.patricknoir.kafka.reactive.common.ReactiveSerializer.byteArraySerializer", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#byteArraySerializer:org.patricknoir.kafka.reactive.common.ReactiveSerializer[Array[Byte]]", "kind" : "implicit val"}, {"label" : "circeEncoderSerializer", "tail" : "(arg0: Encoder[In]): ReactiveSerializer[In]", "member" : "org.patricknoir.kafka.reactive.common.ReactiveSerializer.circeEncoderSerializer", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#circeEncoderSerializer[In](implicitevidence$1:io.circe.Encoder[In]):org.patricknoir.kafka.reactive.common.ReactiveSerializer[In]", "kind" : "implicit def"}, {"label" : "stringSerializer", "tail" : ": ReactiveSerializer[String]", "member" : "org.patricknoir.kafka.reactive.common.ReactiveSerializer.stringSerializer", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#stringSerializer:org.patricknoir.kafka.reactive.common.ReactiveSerializer[String]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/patricknoir\/kafka\/reactive\/common\/ReactiveSerializer.html", "kind" : "trait"}, {"name" : "org.patricknoir.kafka.reactive.common.serializer", "shortDescription" : "Used to serialize types In members of org.patricknoir.kafka.reactive.common.ReactiveSerializer into json strings", "object" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html", "members_object" : [{"label" : "serialize", "tail" : "(in: In)(arg0: ReactiveSerializer[In]): String", "member" : "org.patricknoir.kafka.reactive.common.serializer.serialize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#serialize[In](in:In)(implicitevidence$2:org.patricknoir.kafka.reactive.common.ReactiveSerializer[In]):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/common\/package$$serializer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.patricknoir.kafka.reactive.server" : [{"name" : "org.patricknoir.kafka.reactive.server.ReactiveRoute", "shortDescription" : "Used to define the Services exposed by a ReactiveSystem server instance", "members_case class" : [{"label" : "~", "tail" : "(reactiveRoute: ReactiveRoute): ReactiveRoute", "member" : "org.patricknoir.kafka.reactive.server.ReactiveRoute.~", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#~(reactiveRoute:org.patricknoir.kafka.reactive.server.ReactiveRoute):org.patricknoir.kafka.reactive.server.ReactiveRoute", "kind" : "def"}, {"label" : "add", "tail" : "(reactiveService: ReactiveService[In, Out]): ReactiveRoute", "member" : "org.patricknoir.kafka.reactive.server.ReactiveRoute.add", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#add[In,Out](reactiveService:org.patricknoir.kafka.reactive.server.ReactiveService[In,Out]):org.patricknoir.kafka.reactive.server.ReactiveRoute", "kind" : "def"}, {"member" : "org.patricknoir.kafka.reactive.server.ReactiveRoute#<init>", "error" : "unsupported entity"}, {"label" : "services", "tail" : ": Map[String, ReactiveService[_, _]]", "member" : "org.patricknoir.kafka.reactive.server.ReactiveRoute.services", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#services:Map[String,org.patricknoir.kafka.reactive.server.ReactiveService[_,_]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveRoute.html", "kind" : "case class"}, {"name" : "org.patricknoir.kafka.reactive.server.ReactiveService", "shortDescription" : "A reactive service is the abstraction of a function uniquely identified by an ID.", "object" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html", "members_object" : [{"label" : "reactiveServiceToRoute", "tail" : "(service: ReactiveService[_, _]): ReactiveRoute", "member" : "org.patricknoir.kafka.reactive.server.ReactiveService.reactiveServiceToRoute", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#reactiveServiceToRoute(service:org.patricknoir.kafka.reactive.server.ReactiveService[_,_]):org.patricknoir.kafka.reactive.server.ReactiveRoute", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "unsafeApply", "tail" : "(jsonStr: String)(ec: ExecutionContext): Future[String]", "member" : "org.patricknoir.kafka.reactive.server.ReactiveService.unsafeApply", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#unsafeApply(jsonStr:String)(implicitec:scala.concurrent.ExecutionContext):scala.concurrent.Future[String]", "kind" : "def"}, {"label" : "apply", "tail" : "(in: In): Future[Out]", "member" : "org.patricknoir.kafka.reactive.server.ReactiveService.apply", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#apply(in:In):scala.concurrent.Future[Out]", "kind" : "def"}, {"member" : "org.patricknoir.kafka.reactive.server.ReactiveService#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": String", "member" : "org.patricknoir.kafka.reactive.server.ReactiveService.id", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#id:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveService.html", "kind" : "case class"}, {"name" : "org.patricknoir.kafka.reactive.server.ReactiveSystem", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "()(materializer: Materializer): Any", "member" : "org.patricknoir.kafka.reactive.server.ReactiveSystem.run", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html#run()(implicitmaterializer:akka.stream.Materializer):Any", "kind" : "abstract def"}], "shortDescription" : "A Runnable instance of a Reactive System ServerConcrete instances should be created using the companion object methods:ReactiveSystem.atMostOnce and ReactiveSystem.atLeastOnce", "object" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html", "members_object" : [{"label" : "atLeastOnce", "tail" : "(source: Source[(CommittableMessage[String, String], KafkaRequestEnvelope), _], route: ReactiveRoute, sink: Sink[(CommittableMessage[String, String], Future[KafkaResponseEnvelope]), _])(system: ActorSystem): ReactiveSystem { val g: akka.stream.scaladsl.RunnableGraph[Any] }", "member" : "org.patricknoir.kafka.reactive.server.ReactiveSystem.atLeastOnce", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#atLeastOnce(source:akka.stream.scaladsl.Source[(akka.kafka.ConsumerMessage.CommittableMessage[String,String],org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope),_],route:org.patricknoir.kafka.reactive.server.ReactiveRoute,sink:akka.stream.scaladsl.Sink[(akka.kafka.ConsumerMessage.CommittableMessage[String,String],scala.concurrent.Future[org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope]),_])(implicitsystem:akka.actor.ActorSystem):org.patricknoir.kafka.reactive.server.ReactiveSystem{valg:akka.stream.scaladsl.RunnableGraph[Any]}", "kind" : "def"}, {"label" : "atMostOnce", "tail" : "(source: Source[KafkaRequestEnvelope, _], route: ReactiveRoute, sink: Sink[Future[KafkaResponseEnvelope], _])(system: ActorSystem): ReactiveSystem { ... \/* 2 definitions in type refinement *\/ }", "member" : "org.patricknoir.kafka.reactive.server.ReactiveSystem.atMostOnce", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#atMostOnce(source:akka.stream.scaladsl.Source[org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope,_],route:org.patricknoir.kafka.reactive.server.ReactiveRoute,sink:akka.stream.scaladsl.Sink[scala.concurrent.Future[org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope],_])(implicitsystem:akka.actor.ActorSystem):org.patricknoir.kafka.reactive.server.ReactiveSystem{defextractServiceId(request:org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope):String;valg:akka.stream.scaladsl.RunnableGraph[Any]}", "kind" : "def"}, {"label" : "apply", "tail" : "(source: Source[KafkaRequestEnvelope, _], route: ReactiveRoute, sink: Sink[Future[KafkaResponseEnvelope], _])(system: ActorSystem): ReactiveSystem { ... \/* 2 definitions in type refinement *\/ }", "member" : "org.patricknoir.kafka.reactive.server.ReactiveSystem.apply", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#apply(source:akka.stream.scaladsl.Source[org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope,_],route:org.patricknoir.kafka.reactive.server.ReactiveRoute,sink:akka.stream.scaladsl.Sink[scala.concurrent.Future[org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope],_])(implicitsystem:akka.actor.ActorSystem):org.patricknoir.kafka.reactive.server.ReactiveSystem{defextractServiceId(request:org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope):String;valg:akka.stream.scaladsl.RunnableGraph[Any]}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/patricknoir\/kafka\/reactive\/server\/ReactiveSystem.html", "kind" : "trait"}], "org.patricknoir.kafka.reactive" : [], "org.patricknoir.kafka.reactive.client" : [{"name" : "org.patricknoir.kafka.reactive.client.Committable", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (T) â‡’ Committable[B]): Committable[B]", "member" : "org.patricknoir.kafka.reactive.client.Committable.flatMap", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#flatMap[B](f:T=>org.patricknoir.kafka.reactive.client.Committable[B]):org.patricknoir.kafka.reactive.client.Committable[B]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (T) â‡’ B): Committable[B]", "member" : "org.patricknoir.kafka.reactive.client.Committable.map", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#map[B](f:T=>B):org.patricknoir.kafka.reactive.client.Committable[B]", "kind" : "abstract def"}, {"label" : "commit", "tail" : "()(committer: Committer): Future[Unit]", "member" : "org.patricknoir.kafka.reactive.client.Committable.commit", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#commit()(implicitcommitter:org.patricknoir.kafka.reactive.client.Committer):scala.concurrent.Future[Unit]", "kind" : "abstract def"}, {"label" : "optionOffset", "tail" : ": Option[Offset]", "member" : "org.patricknoir.kafka.reactive.client.Committable.optionOffset", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#optionOffset:Option[org.patricknoir.kafka.reactive.client.Offset]", "kind" : "abstract val"}, {"label" : "value", "tail" : ": T", "member" : "org.patricknoir.kafka.reactive.client.Committable.value", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html#value:T", "kind" : "abstract val"}], "shortDescription" : "A Committable type represents theresponse from a Service which adopts message delivery at least onceas its semantic.", "object" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html", "members_object" : [{"label" : "example", "tail" : "", "member" : "org.patricknoir.kafka.reactive.client.Committable.example", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#example[Credentials,Session,Account]extendsAnyRef", "kind" : "trait"}, {"label" : "CommittableT", "tail" : "", "member" : "org.patricknoir.kafka.reactive.client.Committable.CommittableT", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#CommittableT[F[_],A]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "committableMonad", "tail" : ": Monad[Committable] { def pure[A](a: A): org.patricknoir.kafka.reactive.client.Committable.CommittableImpl[A] }", "member" : "org.patricknoir.kafka.reactive.client.Committable.committableMonad", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#committableMonad:cats.Monad[org.patricknoir.kafka.reactive.client.Committable]{defpure[A](a:A):org.patricknoir.kafka.reactive.client.Committable.CommittableImpl[A]}", "kind" : "implicit val"}, {"label" : "CommittableImpl", "tail" : "", "member" : "org.patricknoir.kafka.reactive.client.Committable.CommittableImpl", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#CommittableImpl[T]extendsCommittable[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/patricknoir\/kafka\/reactive\/client\/Committable.html", "kind" : "trait"}, {"name" : "org.patricknoir.kafka.reactive.client.Committer", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "commit", "tail" : "(offset: Offset): Future[Unit]", "member" : "org.patricknoir.kafka.reactive.client.Committer.commit", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html#commit(offset:org.patricknoir.kafka.reactive.client.Offset):scala.concurrent.Future[Unit]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "org\/patricknoir\/kafka\/reactive\/client\/Committer.html", "kind" : "trait"}, {"name" : "org.patricknoir.kafka.reactive.client.Offset", "shortDescription" : "Map of (topicName, partitionNumber) -> Position", "object" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html", "members_object" : [{"label" : "offsetMonoid", "tail" : ": Monoid[Offset] { val empty: org.patricknoir.kafka.reactive.client.Offset }", "member" : "org.patricknoir.kafka.reactive.client.Offset.offsetMonoid", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#offsetMonoid:cats.Monoid[org.patricknoir.kafka.reactive.client.Offset]{valempty:org.patricknoir.kafka.reactive.client.Offset}", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "org.patricknoir.kafka.reactive.client.Offset#<init>", "error" : "unsupported entity"}, {"label" : "positions", "tail" : ": Map[(String, Int), Int]", "member" : "org.patricknoir.kafka.reactive.client.Offset.positions", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#positions:Map[(String,Int),Int]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/patricknoir\/kafka\/reactive\/client\/Offset.html", "kind" : "case class"}, {"name" : "org.patricknoir.kafka.reactive.client.ReactiveClient", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "send", "tail" : "(destination: String, payload: In, confirmSend: Boolean, headers: Map[String, String])(arg0: ReactiveSerializer[In], timeout: Timeout): Future[Unit]", "member" : "org.patricknoir.kafka.reactive.client.ReactiveClient.send", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#send[In](destination:String,payload:In,confirmSend:Boolean,headers:Map[String,String])(implicitevidence$3:org.patricknoir.kafka.reactive.common.ReactiveSerializer[In],implicittimeout:akka.util.Timeout):scala.concurrent.Future[Unit]", "kind" : "abstract def"}, {"label" : "request", "tail" : "(destination: String, payload: In, headers: Map[String, String])(arg0: ReactiveSerializer[In], arg1: ReactiveDeserializer[Out], timeout: Timeout, ct: ClassTag[Out]): Future[Out]", "member" : "org.patricknoir.kafka.reactive.client.ReactiveClient.request", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html#request[In,Out](destination:String,payload:In,headers:Map[String,String])(implicitevidence$1:org.patricknoir.kafka.reactive.common.ReactiveSerializer[In],implicitevidence$2:org.patricknoir.kafka.reactive.common.ReactiveDeserializer[Out],implicittimeout:akka.util.Timeout,implicitct:scala.reflect.ClassTag[Out]):scala.concurrent.Future[Out]", "kind" : "abstract def"}], "shortDescription" : "Client interface to perform requests to a Reactive System Server", "trait" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveClient.html", "kind" : "trait"}, {"name" : "org.patricknoir.kafka.reactive.client.ReactiveKafkaClient", "shortDescription" : "Concrete implementation of a ReactiveClient using Reactive Streams", "members_class" : [{"label" : "send", "tail" : "(destination: String, payload: In, confirmSend: Boolean, headers: Map[String, String])(arg0: ReactiveSerializer[In], timeout: Timeout): Future[Unit]", "member" : "org.patricknoir.kafka.reactive.client.ReactiveKafkaClient.send", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#send[In](destination:String,payload:In,confirmSend:Boolean,headers:Map[String,String])(implicitevidence$3:org.patricknoir.kafka.reactive.common.ReactiveSerializer[In],implicittimeout:akka.util.Timeout):scala.concurrent.Future[Unit]", "kind" : "def"}, {"label" : "request", "tail" : "(destination: String, payload: In, headers: Map[String, String])(arg0: ReactiveSerializer[In], arg1: ReactiveDeserializer[Out], timeout: Timeout, ct: ClassTag[Out]): Future[Out]", "member" : "org.patricknoir.kafka.reactive.client.ReactiveKafkaClient.request", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#request[In,Out](destination:String,payload:In,headers:Map[String,String])(implicitevidence$1:org.patricknoir.kafka.reactive.common.ReactiveSerializer[In],implicitevidence$2:org.patricknoir.kafka.reactive.common.ReactiveDeserializer[Out],implicittimeout:akka.util.Timeout,implicitct:scala.reflect.ClassTag[Out]):scala.concurrent.Future[Out]", "kind" : "def"}, {"label" : "coordinator", "tail" : ": ActorRef", "member" : "org.patricknoir.kafka.reactive.client.ReactiveKafkaClient.coordinator", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#coordinator:akka.actor.ActorRef", "kind" : "val"}, {"member" : "org.patricknoir.kafka.reactive.client.ReactiveKafkaClient#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaClient.html", "kind" : "class"}, {"name" : "org.patricknoir.kafka.reactive.client.ReactiveKafkaStreamSource", "shortDescription" : "", "object" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html", "members_object" : [{"label" : "atMostOnce", "tail" : "(responseTopic: String, consumerSettings: ConsumerSettings[String, String], maxConcurrency: Int)(system: ActorSystem, ec: ExecutionContext): Source[KafkaResponseEnvelope, _]", "member" : "org.patricknoir.kafka.reactive.client.ReactiveKafkaStreamSource.atMostOnce", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#atMostOnce(responseTopic:String,consumerSettings:akka.kafka.ConsumerSettings[String,String],maxConcurrency:Int)(implicitsystem:akka.actor.ActorSystem,implicitec:scala.concurrent.ExecutionContext):akka.stream.scaladsl.Source[org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope,_]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/client\/ReactiveKafkaStreamSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org" : [], "org.patricknoir.kafka.reactive.server.streams" : [{"name" : "org.patricknoir.kafka.reactive.server.streams.ReactiveKafkaSink", "shortDescription" : "", "object" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html", "members_object" : [{"label" : "createSync", "tail" : "(bootstrapServers: Set[String])(system: ActorSystem): Sink[KafkaResponseEnvelope, _]", "member" : "org.patricknoir.kafka.reactive.server.streams.ReactiveKafkaSink.createSync", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#createSync(bootstrapServers:Set[String])(implicitsystem:akka.actor.ActorSystem):akka.stream.scaladsl.Sink[org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope,_]", "kind" : "def"}, {"label" : "atLeastOnce", "tail" : "(bootstrapServers: Set[String], concurrency: Int, commitMaxBatchSize: Int, commitTimeWindow: FiniteDuration)(system: ActorSystem, ec: ExecutionContext): Sink[(CommittableMessage[String, String], Future[KafkaResponseEnvelope]), _]", "member" : "org.patricknoir.kafka.reactive.server.streams.ReactiveKafkaSink.atLeastOnce", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#atLeastOnce(bootstrapServers:Set[String],concurrency:Int,commitMaxBatchSize:Int,commitTimeWindow:scala.concurrent.duration.FiniteDuration)(implicitsystem:akka.actor.ActorSystem,implicitec:scala.concurrent.ExecutionContext):akka.stream.scaladsl.Sink[(akka.kafka.ConsumerMessage.CommittableMessage[String,String],scala.concurrent.Future[org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope]),_]", "kind" : "def"}, {"label" : "create", "tail" : "(bootstrapServers: Set[String], concurrency: Int)(system: ActorSystem, ec: ExecutionContext): Sink[Future[KafkaResponseEnvelope], _]", "member" : "org.patricknoir.kafka.reactive.server.streams.ReactiveKafkaSink.create", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#create(bootstrapServers:Set[String],concurrency:Int)(implicitsystem:akka.actor.ActorSystem,implicitec:scala.concurrent.ExecutionContext):akka.stream.scaladsl.Sink[scala.concurrent.Future[org.patricknoir.kafka.reactive.common.KafkaResponseEnvelope],_]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSink$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.patricknoir.kafka.reactive.server.streams.ReactiveKafkaSource", "shortDescription" : "", "object" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html", "members_object" : [{"label" : "atLeastOnce", "tail" : "(requestTopic: String, bootstrapServers: Set[String], clientId: String, groupId: String)(system: ActorSystem): Source[(CommittableMessage[String, String], KafkaRequestEnvelope), _]", "member" : "org.patricknoir.kafka.reactive.server.streams.ReactiveKafkaSource.atLeastOnce", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#atLeastOnce(requestTopic:String,bootstrapServers:Set[String],clientId:String,groupId:String)(implicitsystem:akka.actor.ActorSystem):akka.stream.scaladsl.Source[(akka.kafka.ConsumerMessage.CommittableMessage[String,String],org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope),_]", "kind" : "def"}, {"label" : "createConsumerSettings", "tail" : "(servers: Set[String], clientId: String, groupId: String, autoCommit: Boolean)(system: ActorSystem): ConsumerSettings[String, String]", "member" : "org.patricknoir.kafka.reactive.server.streams.ReactiveKafkaSource.createConsumerSettings", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#createConsumerSettings(servers:Set[String],clientId:String,groupId:String,autoCommit:Boolean)(implicitsystem:akka.actor.ActorSystem):akka.kafka.ConsumerSettings[String,String]", "kind" : "def"}, {"label" : "create", "tail" : "(requestTopic: String, bootstrapServers: Set[String], clientId: String, groupId: String, maxConcurrency: Int)(system: ActorSystem, deserializerExecutionContext: ExecutionContext): Source[KafkaRequestEnvelope, _]", "member" : "org.patricknoir.kafka.reactive.server.streams.ReactiveKafkaSource.create", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#create(requestTopic:String,bootstrapServers:Set[String],clientId:String,groupId:String,maxConcurrency:Int)(implicitsystem:akka.actor.ActorSystem,implicitdeserializerExecutionContext:scala.concurrent.ExecutionContext):akka.stream.scaladsl.Source[org.patricknoir.kafka.reactive.common.KafkaRequestEnvelope,_]", "kind" : "def"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/patricknoir\/kafka\/reactive\/server\/streams\/ReactiveKafkaSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};